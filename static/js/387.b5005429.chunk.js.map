{"version":3,"file":"static/js/387.b5005429.chunk.js","mappings":"+QAOaA,GALaC,EAAAA,EAAAA,EAAH,sEAEJ,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAGIH,EAAAA,EAAAA,GAAH,6EAMRI,EAAWJ,EAAAA,EAAAA,GAAH,gFAEA,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAITE,EAAUL,EAAAA,EAAAA,IAAH,iDACD,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAGPG,EAAYN,EAAAA,EAAAA,EAAH,iDACH,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,I,SCjBPI,EAAO,WAClB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,uGACOC,EAAAA,EAAAA,IAAaP,GADpB,gBACRQ,EADQ,EACRA,KACRJ,EAAaI,GAFG,2CAAH,qDAIfF,GACD,GAAE,CAACN,IAEJ,IAAMS,EAAe,SAAAC,GACnB,GAAKA,EAGL,MAAO,kCAAoCA,CAC5C,EACD,OACE,8BACGP,EAAUQ,OAAS,IAClB,SAACpB,EAAD,UACGY,EAAUS,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,UAAWL,EAAmB,EAAnBA,aACrC,OACE,UAACd,EAAD,YACE,SAACC,EAAD,CACEmB,IAAKP,EAAaC,GAClBO,IAAKH,EACLI,MAAM,MACNC,OAAO,SAET,SAACrB,EAAD,UAAYgB,KACZ,uCAAeC,OARFF,EAWlB,OAKV,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const AutorTitle = styled.p`\n  font-weight: 500;\n  margin-bottom: ${p => p.theme.space[2]}px;\n`;\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 30px;\n`;\n\nexport const CastItem = styled.li`\n  &:not(:last-child) {\n    margin-bottom: ${p => p.theme.space[5]}px;\n  }\n`;\n\nexport const CastImg = styled.img`\n  margin-bottom: ${p => p.theme.space[3]}px;\n`;\n\nexport const ActorName = styled.p`\n  margin-bottom: ${p => p.theme.space[3]}px;\n`;\n","import { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCast } from 'services/api';\n\nimport { CastItem, CastImg, ActorName, CastList } from './Cast.styled';\n\nexport const Cast = () => {\n  const { movieId } = useParams();\n  const [movieInfo, setMovieInfo] = useState([]);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      const { cast } = await getMovieCast(movieId);\n      setMovieInfo(cast);\n    };\n    fetchCast();\n  }, [movieId]);\n\n  const createImgUrl = profile_path => {\n    if (!profile_path) {\n      return;\n    }\n    return 'https://image.tmdb.org/t/p/w342' + profile_path;\n  };\n  return (\n    <>\n      {movieInfo.length > 0 && (\n        <CastList>\n          {movieInfo.map(({ id, name, character, profile_path }) => {\n            return (\n              <CastItem key={id}>\n                <CastImg\n                  src={createImgUrl(profile_path)}\n                  alt={name}\n                  width=\"342\"\n                  height=\"513\"\n                />\n                <ActorName>{name}</ActorName>\n                <p>Character: {character}</p>\n              </CastItem>\n            );\n          })}\n        </CastList>\n      )}\n    </>\n  );\n};\n"],"names":["CastList","styled","p","theme","space","CastItem","CastImg","ActorName","Cast","movieId","useParams","useState","movieInfo","setMovieInfo","useEffect","fetchCast","getMovieCast","cast","createImgUrl","profile_path","length","map","id","name","character","src","alt","width","height"],"sourceRoot":""}